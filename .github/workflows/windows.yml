name: Build osquery on Windows

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure Git for Windows
      run: |
        git config --global core.symlinks true
        git config --global core.autocrlf input
      if: runner.os == 'Windows'

    - name: Install Visual Studio 2019 Build Tools
      run: |
        choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Component.VC.14.29.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK.19041 --add Microsoft.VisualStudio.Component.Clang.C2"
        refreshenv
      if: runner.os == 'Windows'

    - name: Install CMake
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        refreshenv
      if: runner.os == 'Windows'

    - name: Install Python 3 64-bit
      run: |
        choco install python --version 3.x
        refreshenv
      if: runner.os == 'Windows'

    - name: Set up Strawberry Perl in PATH
      run: |
        setx PATH "%PATH%;C:\Strawberry\perl\bin" /M
      if: runner.os == 'Windows'

    - name: Set up longer paths and reboot
      run: |
        REG ADD HKLM\SYSTEM\CurrentControlSet\Control\FileSystem /v LongPathsEnabled /t REG_DWORD /d 1 /f
        shutdown /r /t 0
      if: runner.os == 'Windows'

    - name: Wait for the machine to restart
      run: |
        echo "Waiting for the machine to restart..."
        sleep 60
      if: runner.os == 'Windows'

    - name: Download and build osquery source
      run: |
        git clone https://github.com/osquery/osquery
        cd osquery

        # Configure
        mkdir build
        cd build
        cmake -G "Visual Studio 16 2019" -A x64 ..

        # Build
        cmake --build . --config RelWithDebInfo -j2
      if: runner.os == 'Windows'

    - name: Test (if applicable)
      run: |
        # Add commands to run tests if applicable
      if: runner.os == 'Windows'
